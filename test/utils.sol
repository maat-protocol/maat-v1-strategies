// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

abstract contract BaseTest is Test {
    Constants internal constants;

    address internal admin;
    address payable internal alice;
    address payable internal bob;
    address payable internal carol;

    mapping(uint chainId => string envString) forkURLs;

    IERC20 internal USDC;
    IERC20 internal USDT;

    function supportsInterface(bytes4) public pure returns (bool) {
        return true;
    }

    constructor() {
        forkURLs[137] = "POLYGON_RPC";
        forkURLs[42161] = "ARBITRUM_RPC";
        forkURLs[1329] = "SEI_RPC";

        admin = tx.origin;
        alice = createUser("alice", address(0x1));
        bob = createUser("bob", address(0x2));
        carol = createUser("carol", address(0x3));

        constants = new Constants();
        constants.initAddressLabels(vm);

        USDC = IERC20(constants.getAddress("arbitrum.usdc"));
        USDT = IERC20(constants.getAddress("arbitrum.usdt"));
    }

    function fork(uint chainId, uint forkBlockNumber) public {
        string memory envString = forkURLs[chainId];

        vm.createSelectFork(vm.envString(envString), forkBlockNumber);
    }

    function createUser(
        string memory label,
        address account
    ) internal returns (address payable) {
        vm.deal(account, 100 ether);
        vm.label(account, label);
        return payable(account);
    }

    function advanceBlocks(
        uint256 delta
    ) internal returns (uint256 blockNumber) {
        blockNumber = block.number + delta;
        vm.roll(blockNumber);
    }

    function advanceTime(uint256 delta) internal returns (uint256 timestamp) {
        timestamp = block.timestamp + delta;
        vm.warp(timestamp);
    }
}

contract Constants {
    mapping(string => address) private addressMap;

    string[] private addressKeys;

    bytes public swapData =
        hex"90411a3200000000000000000000000066398e8b1e02291381d049c0c932394d5f2fc7ac000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000066398e8b1e02291381d049c0c932394d5f2fc7ac0000000000000000000000008ed69f5c2c6cdcc9bb791b2fe300a825537f2f5400000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f1b8f00000000000000000000000000000000000000000000000000000000000f42ae5b07cdb000000000000000000000000cc065eb6460272481216757293ffc54a061ba60e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000066398e8b1e02291381d049c0c932394d5f2fc7ac00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002efd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000af88d065e77c8cc2239327c5edb3a432268e583100000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000648a6a1e85000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000353c1f0bc78fbbc245b3c93ef77b1dcc5b77d2a000000000000000000000000000000000000000000000000000000000000f42a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a49f865422000000000000000000000000af88d065e77c8cc2239327c5edb3a432268ed1660f99000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000008ed69f5c2c6cdcc9bb791b2fe300a825537f2f5400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    // request - https://open-api.openocean.finance/v4/42161/swap?inTokenAddress=0x6694340fc020c5E6B96567843da2df01b2CE1eb6&outTokenAddress=0xaf88d065e77c8cC2239327C5EDb3A432268e5831&gasPrice=3&slippage=5&account=0x6E8fa16E67cc861c3b51c603fAC1b70c275714F6&amount=0.273240358700000000
    bytes public swapDataFromSTGToUSDCOnArbitrum =
        hex"90411a32000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a5000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000006694340fc020c5e6b96567843da2df01b2ce1eb6000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a50000000000000000000000006E8fa16E67cc861c3b51c603fAC1b70c275714F600000000000000000000000000000000000000000000000003cabea8969d2300000000000000000000000000000000000000000000000000000000000001a2f8000000000000000000000000000000000000000000000000000000000001b9060000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000007a000000000000000000000000000000000000000000000000000000000000008c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064eb5625d90000000000000000000000006694340fc020c5e6b96567843da2df01b2ce1eb600000000000000000000000074c764d41b77dbbb4fe771dab1939b00b146894a00000000000000000000000000000000000000000000000003cabea8969d23000000000000000000000000000000000000000000000000000000000000000000000000000000000074c764d41b77dbbb4fe771dab1939b00b146894a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a402b9446c0000000000000000000000006694340fc020c5e6b96567843da2df01b2ce1eb6000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a500000000000000000000000099fd6ccb6b3b87f80c147647024ee6711f549f6700000000000000000000000000000000000000000000000003cabea8969d230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099fd6ccb6b3b87f80c147647024ee6711f549f6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a4627dd56a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000006694340fc020c5e6b96567843da2df01b2ce1eb6000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002449f865422000000000000000000000000912ce59144191c1204e64559fe8253a0e49ee5b07cdb000000000000000000000000616a2a065bfe53da48e83e7d709fb428aa3c9f5b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002e912ce59144191c1204e64559fe8253a0e49e6548000064af88d065e77c8cc2239327c5edb3a432268e58310000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000648a6a1e85000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000353c1f0bc78fbbc245b3c93ef77b1dcc5b77d2a0000000000000000000000000000000000000000000000000000000000001b90600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a49f865422000000000000000000000000af88d065e77c8cc2239327c5edb3a432268ed1660f99000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000006E8fa16E67cc861c3b51c603fAC1b70c275714F600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    uint256 public constant defaultForkChainId = 42161;
    uint256 public constant defaultForkBlockNumber = 235180503;

    constructor() {
        setAddress("arbitrum.usdt", 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
        setAddress("arbitrum.usdc", 0xaf88d065e77c8cC2239327C5EDb3A432268e5831);

        setAddress(
            "arbitrum.openOceanExchange",
            0x6352a56caadC4F1E25CD6c75970Fa768A3304e64
        );

        setAddress(
            "arbitrum.stargatePoolUSDC",
            0xe8CDF27AcD73a434D661C84887215F7598e7d0d3
        );
        setAddress(
            "arbitrum.stargatePoolUSDT",
            0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0
        );
        setAddress(
            "arbitrum.stargateStaking",
            0x3da4f8E456AC648c489c286B99Ca37B666be7C4C
        );
        setAddress(
            "arbitrum.stargateMultiRewarder",
            0x957b12606690C7692eF92bb5c34a0E63baED99C7
        );
        setAddress(
            "arbitrum.harvestPotPool",
            0x331440228e6f3c2270cFC196acB3283E8D689A08
        );
        setAddress(
            "arbitrum.harvestVault",
            0xBCC2B58Ab9a4F6bb576F80Def62ea2BC91fC49c2
        );
        setAddress(
            "arbitrum.wrappedNativeToken",
            0x82aF49447D8a07e3bd95BD0d56f35241523fBab1
        );

        setAddress("polygon.usdc", 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359);
        setAddress(
            "polygon.yearnUSDCVault",
            0x34b9421Fe3d52191B64bC32ec1aB764dcBcDbF5e
        );

        setAddress("sei.usdc", 0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1);
        setAddress(
            "sei.wrappedNativeToken",
            0xE30feDd158A2e3b13e9badaeABaFc5516e95e8C7
        );
        setAddress(
            "sei.stargatePoolUSDC",
            0x45d417612e177672958dC0537C45a8f8d754Ac2E
        );
        setAddress(
            "sei.stargateStaking",
            0x8c1014B5936dD88BAA5F4DB0423C3003615E03a0
        );
        setAddress(
            "sei.stargateMultiRewarder",
            0xd69A3D88438f042a5a0b995b970F78FC8120ED67
        );
    }

    function initAddressLabels(Vm vm) public {
        for (uint256 i = 0; i < addressKeys.length; i++) {
            string memory key = addressKeys[i];
            vm.label(addressMap[key], key);
        }
    }

    function setAddress(string memory key, address value) public {
        require(
            addressMap[key] == address(0),
            string(bytes.concat("address already exists: ", bytes(key)))
        );
        addressMap[key] = value;
        addressKeys.push(key);
    }

    function getAddress(string calldata key) public view returns (address) {
        require(
            addressMap[key] != address(0),
            string(bytes.concat("address not found: ", bytes(key)))
        );
        return addressMap[key];
    }
}
